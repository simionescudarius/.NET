//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarteDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF_Project2")]
    public partial class CarteDTO : object
    {
        
        private ServiceReference2.AutorDTO AutorDtoField;
        
        private ServiceReference2.GenDTO GenDtoField;
        
        private ServiceReference2.ImprumutDTO[] ImprumutDtoField;
        
        private int autorIdField;
        
        private int carteIdField;
        
        private int genIdField;
        
        private string titluField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.AutorDTO AutorDto
        {
            get
            {
                return this.AutorDtoField;
            }
            set
            {
                this.AutorDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.GenDTO GenDto
        {
            get
            {
                return this.GenDtoField;
            }
            set
            {
                this.GenDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.ImprumutDTO[] ImprumutDto
        {
            get
            {
                return this.ImprumutDtoField;
            }
            set
            {
                this.ImprumutDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int autorId
        {
            get
            {
                return this.autorIdField;
            }
            set
            {
                this.autorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int carteId
        {
            get
            {
                return this.carteIdField;
            }
            set
            {
                this.carteIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int genId
        {
            get
            {
                return this.genIdField;
            }
            set
            {
                this.genIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string titlu
        {
            get
            {
                return this.titluField;
            }
            set
            {
                this.titluField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AutorDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF_Project2")]
    public partial class AutorDTO : object
    {
        
        private ServiceReference2.CarteDTO[] CarteDtoField;
        
        private int autorIdField;
        
        private string numeField;
        
        private string prenumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.CarteDTO[] CarteDto
        {
            get
            {
                return this.CarteDtoField;
            }
            set
            {
                this.CarteDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int autorId
        {
            get
            {
                return this.autorIdField;
            }
            set
            {
                this.autorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nume
        {
            get
            {
                return this.numeField;
            }
            set
            {
                this.numeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string prenume
        {
            get
            {
                return this.prenumeField;
            }
            set
            {
                this.prenumeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF_Project2")]
    public partial class GenDTO : object
    {
        
        private ServiceReference2.CarteDTO[] CarteDtoField;
        
        private string descriereField;
        
        private int genIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.CarteDTO[] CarteDto
        {
            get
            {
                return this.CarteDtoField;
            }
            set
            {
                this.CarteDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string descriere
        {
            get
            {
                return this.descriereField;
            }
            set
            {
                this.descriereField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int genId
        {
            get
            {
                return this.genIdField;
            }
            set
            {
                this.genIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImprumutDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF_Project2")]
    public partial class ImprumutDTO : object
    {
        
        private ServiceReference2.CarteDTO CarteDtoField;
        
        private ServiceReference2.CititorDTO CititorDtoField;
        
        private ServiceReference2.ReviewDTO[] ReviewField;
        
        private int carteIdField;
        
        private int cititorIdField;
        
        private System.Nullable<System.DateTime> dataImprumutField;
        
        private System.Nullable<System.DateTime> dataRestituireField;
        
        private System.Nullable<System.DateTime> dataScadentaField;
        
        private int imprumutIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.CarteDTO CarteDto
        {
            get
            {
                return this.CarteDtoField;
            }
            set
            {
                this.CarteDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.CititorDTO CititorDto
        {
            get
            {
                return this.CititorDtoField;
            }
            set
            {
                this.CititorDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.ReviewDTO[] Review
        {
            get
            {
                return this.ReviewField;
            }
            set
            {
                this.ReviewField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int carteId
        {
            get
            {
                return this.carteIdField;
            }
            set
            {
                this.carteIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cititorId
        {
            get
            {
                return this.cititorIdField;
            }
            set
            {
                this.cititorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> dataImprumut
        {
            get
            {
                return this.dataImprumutField;
            }
            set
            {
                this.dataImprumutField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> dataRestituire
        {
            get
            {
                return this.dataRestituireField;
            }
            set
            {
                this.dataRestituireField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> dataScadenta
        {
            get
            {
                return this.dataScadentaField;
            }
            set
            {
                this.dataScadentaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int imprumutId
        {
            get
            {
                return this.imprumutIdField;
            }
            set
            {
                this.imprumutIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CititorDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF_Project2")]
    public partial class CititorDTO : object
    {
        
        private ServiceReference2.ImprumutDTO[] ImprumutDtoField;
        
        private string adresaField;
        
        private int cititorIdField;
        
        private string emailField;
        
        private string numeField;
        
        private string prenumeField;
        
        private System.Nullable<short> stareField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.ImprumutDTO[] ImprumutDto
        {
            get
            {
                return this.ImprumutDtoField;
            }
            set
            {
                this.ImprumutDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string adresa
        {
            get
            {
                return this.adresaField;
            }
            set
            {
                this.adresaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cititorId
        {
            get
            {
                return this.cititorIdField;
            }
            set
            {
                this.cititorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email
        {
            get
            {
                return this.emailField;
            }
            set
            {
                this.emailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nume
        {
            get
            {
                return this.numeField;
            }
            set
            {
                this.numeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string prenume
        {
            get
            {
                return this.prenumeField;
            }
            set
            {
                this.prenumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> stare
        {
            get
            {
                return this.stareField;
            }
            set
            {
                this.stareField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReviewDTO", Namespace="http://schemas.datacontract.org/2004/07/WCF_Project2")]
    public partial class ReviewDTO : object
    {
        
        private ServiceReference2.ImprumutDTO ImprumutDtoField;
        
        private int imprumutIdField;
        
        private int reviewIdField;
        
        private string textField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.ImprumutDTO ImprumutDto
        {
            get
            {
                return this.ImprumutDtoField;
            }
            set
            {
                this.ImprumutDtoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int imprumutId
        {
            get
            {
                return this.imprumutIdField;
            }
            set
            {
                this.imprumutIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int reviewId
        {
            get
            {
                return this.reviewIdField;
            }
            set
            {
                this.reviewIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IBookService")]
    public interface IBookService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/BuyBooks", ReplyAction="http://tempuri.org/IBookService/BuyBooksResponse")]
        System.Threading.Tasks.Task BuyBooksAsync(ServiceReference2.CarteDTO carteDto, short numberOfBooks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/GetAvailableBooks", ReplyAction="http://tempuri.org/IBookService/GetAvailableBooksResponse")]
        System.Threading.Tasks.Task<ServiceReference2.CarteDTO[]> GetAvailableBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/GetBookById", ReplyAction="http://tempuri.org/IBookService/GetBookByIdResponse")]
        System.Threading.Tasks.Task<ServiceReference2.CarteDTO> GetBookByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/GetAllBooks", ReplyAction="http://tempuri.org/IBookService/GetAllBooksResponse")]
        System.Threading.Tasks.Task<ServiceReference2.CarteDTO[]> GetAllBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/GetBooksByGen", ReplyAction="http://tempuri.org/IBookService/GetBooksByGenResponse")]
        System.Threading.Tasks.Task<ServiceReference2.CarteDTO[]> GetBooksByGenAsync(string gen);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IBookServiceChannel : ServiceReference2.IBookService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class BookServiceClient : System.ServiceModel.ClientBase<ServiceReference2.IBookService>, ServiceReference2.IBookService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BookServiceClient() : 
                base(BookServiceClient.GetDefaultBinding(), BookServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBookService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BookServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(BookServiceClient.GetBindingForEndpoint(endpointConfiguration), BookServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BookServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BookServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BookServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BookServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BookServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task BuyBooksAsync(ServiceReference2.CarteDTO carteDto, short numberOfBooks)
        {
            return base.Channel.BuyBooksAsync(carteDto, numberOfBooks);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.CarteDTO[]> GetAvailableBooksAsync()
        {
            return base.Channel.GetAvailableBooksAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.CarteDTO> GetBookByIdAsync(int id)
        {
            return base.Channel.GetBookByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.CarteDTO[]> GetAllBooksAsync()
        {
            return base.Channel.GetAllBooksAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.CarteDTO[]> GetBooksByGenAsync(string gen)
        {
            return base.Channel.GetBooksByGenAsync(gen);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBookService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBookService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/BookService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BookServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBookService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BookServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBookService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IBookService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ILoanService")]
    public interface ILoanService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/LoanBook", ReplyAction="http://tempuri.org/ILoanService/LoanBookResponse")]
        System.Threading.Tasks.Task LoanBookAsync(ServiceReference2.CarteDTO book, ServiceReference2.CititorDTO reader, System.DateTime loanDate, System.DateTime deadLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/UpdateLoan", ReplyAction="http://tempuri.org/ILoanService/UpdateLoanResponse")]
        System.Threading.Tasks.Task UpdateLoanAsync(ServiceReference2.ImprumutDTO imprumut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/GetLoansByUserEmail", ReplyAction="http://tempuri.org/ILoanService/GetLoansByUserEmailResponse")]
        System.Threading.Tasks.Task<ServiceReference2.ImprumutDTO[]> GetLoansByUserEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/GetLoansByUserId", ReplyAction="http://tempuri.org/ILoanService/GetLoansByUserIdResponse")]
        System.Threading.Tasks.Task<ServiceReference2.ImprumutDTO[]> GetLoansByUserIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoanService/GetLoanForBookId", ReplyAction="http://tempuri.org/ILoanService/GetLoanForBookIdResponse")]
        System.Threading.Tasks.Task<ServiceReference2.ImprumutDTO[]> GetLoanForBookIdAsync(int bookId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface ILoanServiceChannel : ServiceReference2.ILoanService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class LoanServiceClient : System.ServiceModel.ClientBase<ServiceReference2.ILoanService>, ServiceReference2.ILoanService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public LoanServiceClient() : 
                base(LoanServiceClient.GetDefaultBinding(), LoanServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ILoanService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoanServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(LoanServiceClient.GetBindingForEndpoint(endpointConfiguration), LoanServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoanServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(LoanServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoanServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(LoanServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task LoanBookAsync(ServiceReference2.CarteDTO book, ServiceReference2.CititorDTO reader, System.DateTime loanDate, System.DateTime deadLine)
        {
            return base.Channel.LoanBookAsync(book, reader, loanDate, deadLine);
        }
        
        public System.Threading.Tasks.Task UpdateLoanAsync(ServiceReference2.ImprumutDTO imprumut)
        {
            return base.Channel.UpdateLoanAsync(imprumut);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.ImprumutDTO[]> GetLoansByUserEmailAsync(string email)
        {
            return base.Channel.GetLoansByUserEmailAsync(email);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.ImprumutDTO[]> GetLoansByUserIdAsync(int id)
        {
            return base.Channel.GetLoansByUserIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.ImprumutDTO[]> GetLoanForBookIdAsync(int bookId)
        {
            return base.Channel.GetLoanForBookIdAsync(bookId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILoanService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILoanService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/LoanService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return LoanServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ILoanService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return LoanServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ILoanService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ILoanService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IReaderService")]
    public interface IReaderService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReaderService/GetReaderByEmail", ReplyAction="http://tempuri.org/IReaderService/GetReaderByEmailResponse")]
        System.Threading.Tasks.Task<ServiceReference2.CititorDTO> GetReaderByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReaderService/RegisterReader", ReplyAction="http://tempuri.org/IReaderService/RegisterReaderResponse")]
        System.Threading.Tasks.Task RegisterReaderAsync(ServiceReference2.CititorDTO cititor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReaderService/IsReaderTrustworthy", ReplyAction="http://tempuri.org/IReaderService/IsReaderTrustworthyResponse")]
        System.Threading.Tasks.Task<bool> IsReaderTrustworthyAsync(ServiceReference2.CititorDTO cititor);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IReaderServiceChannel : ServiceReference2.IReaderService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class ReaderServiceClient : System.ServiceModel.ClientBase<ServiceReference2.IReaderService>, ServiceReference2.IReaderService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ReaderServiceClient() : 
                base(ReaderServiceClient.GetDefaultBinding(), ReaderServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IReaderService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReaderServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ReaderServiceClient.GetBindingForEndpoint(endpointConfiguration), ReaderServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReaderServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ReaderServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReaderServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ReaderServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReaderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.CititorDTO> GetReaderByEmailAsync(string email)
        {
            return base.Channel.GetReaderByEmailAsync(email);
        }
        
        public System.Threading.Tasks.Task RegisterReaderAsync(ServiceReference2.CititorDTO cititor)
        {
            return base.Channel.RegisterReaderAsync(cititor);
        }
        
        public System.Threading.Tasks.Task<bool> IsReaderTrustworthyAsync(ServiceReference2.CititorDTO cititor)
        {
            return base.Channel.IsReaderTrustworthyAsync(cititor);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IReaderService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IReaderService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/ReaderService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ReaderServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IReaderService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ReaderServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IReaderService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IReaderService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IReviewService")]
    public interface IReviewService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/AddReviewForLoan", ReplyAction="http://tempuri.org/IReviewService/AddReviewForLoanResponse")]
        System.Threading.Tasks.Task AddReviewForLoanAsync(ServiceReference2.ImprumutDTO imprumut, string text);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IReviewServiceChannel : ServiceReference2.IReviewService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class ReviewServiceClient : System.ServiceModel.ClientBase<ServiceReference2.IReviewService>, ServiceReference2.IReviewService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ReviewServiceClient() : 
                base(ReviewServiceClient.GetDefaultBinding(), ReviewServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IReviewService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReviewServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ReviewServiceClient.GetBindingForEndpoint(endpointConfiguration), ReviewServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReviewServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ReviewServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReviewServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ReviewServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReviewServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task AddReviewForLoanAsync(ServiceReference2.ImprumutDTO imprumut, string text)
        {
            return base.Channel.AddReviewForLoanAsync(imprumut, text);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IReviewService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IReviewService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/ReviewService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ReviewServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IReviewService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ReviewServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IReviewService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IReviewService,
        }
    }
}
